#!/bin/bash
#### Updates all the http.conf files and builds out the basic web host structure
## Very basic right now, just working on function

### DEFAULT CONFIG OPTIONS (see /web/DEFAULT/conf/updateWeb.conf)
TEMPLATEDIR=/web/DEFAULT/conf
HTTPDCONF=${TEMPLATEDIR}/template.conf
SSLCONF=${TEMPLATEDIR}/ssl-template.conf
DEVSSHKEYS=${TEMPLATEDIR}/authorized_keys2
VHOSTCONF=/etc/httpd/conf.d/z-vhost.conf
ENVIRONMENTS="live stage dev"
WEBDIR="public_html"
STAGE_PASSWD="welcome123"
BASE_DIRS_ROOT="conf logs stats"
BASE_DIRS_OWNER="pw tmp"
ROOT_OWNED_SITEDIR=1
WEBSRVUSER="apache"

# Load Site Specific Config
if [ -f $TEMPLATEDIR/updateWeb.conf ]; then
	. $TEMPLATEDIR/updateWeb.conf
fi

### Update the $VHOSTCONF
cat > $VHOSTCONF << EOF
### BASIC TEMPLATE Virtual Hosts
#
## DO NOT EDIT THIS FILE DIRECTLY
## -- SEE /root/bin/updateAllWebConfigs
##
EOF

for SITE in /web/*; do
	domain=`basename $SITE`
	
	# Skip the DEFAULT directory
	if [ $domain == "DEFAULT" ]; then continue; fi

	owner=`echo $domain | cut -f 1 -d .`
	group=$owner # group same as owner (for now)
	SEDTAGSWAPS="-e s/DOMAIN/$domain/g"
	SEDTAGSWAPS="$SEDTAGSWAPS -e s/OWNER/$owner/g"
	SEDTAGSWAPS="$SEDTAGSWAPS -e s/GROUP/$group/g"

	# Create BASE directories (if they don't exist)
	# $SITE exists, thats why we are in here
	for dir in $BASE_DIRS_ROOT $BASE_DIRS_OWNER; do
		if [ ! -d $SITE/$dir ]; then
			mkdir $SITE/$dir
		fi
	done

	# Create Web Environments
	for ENV in $ENVIRONMENTS; do
		if [ ! -d $SITE/$ENV ]; then
			mkdir -p $SITE/$ENV
			/bin/chown -hR $owner:$group $SITE/$ENV
			/bin/chmod u=rwX,g=rX,o=X $SITE/$ENV
		fi
		if [ ! -d $SITE/$ENV/$WEBDIR ]; then
			mkdir -p $SITE/$ENV/$WEBDIR
			echo "$ENV $domain" > $SITE/$ENV/$WEBDIR/index.html
			/bin/chown -hR $owner:$group $SITE/$ENV
			/bin/chmod -R u=rwX,g=rX,o=rX $SITE/$ENV/$WEBDIR
		fi
	done

	# Setup SSH Keys
	if [ ! -d $SITE/.ssh ]; then
		mkdir $SITE/.ssh
	fi
	if [ -f $DEVSSHKEYS ]; then
		# Overwrite authorized_keys2 with the global config
		cat $DEVSSHKEYS > $SITE/.ssh/authorized_keys2
	fi
	if [ -f $SITE/conf/authorized_keys2 ]; then
		# Append site specific keys
		cat $SITE/conf/authorized_keys2 >> $SITE/.ssh/authorized_keys2
	fi

	# Custom (non-template) httpd.conf
	if [ -f $SITE/conf/httpd.conf.custom ]; then
		echo Restoring $SITE/conf/httpd.conf.custom
		cp $SITE/conf/httpd.conf.custom  $SITE/conf/httpd.conf
	else
	
		## Create httpd.conf from template
		# Apply SED script if it exists - else apply standard sed
		if [ -f $SITE/conf/httpd.conf.sed ]; then
			echo Applying customizations from $SITE/conf/httpd.conf.sed
			SEDTAGSWAPS="$SEDTAGSWAPS -f $SITE/conf/httpd.conf.sed"
		else
			echo Applying standard configuration to $domain
		fi
		sed $SEDTAGSWAPS $HTTPDCONF > $SITE/conf/httpd.conf

		# Apply SSL
		if [ -f $SITE/conf/ssl/cert.pem -a -f $SITE/conf/ssl/key.pem -a -f $SITE/conf/ssl/ca.pem ]; then
			echo Applying SSL configuration to $domain
			sed $SEDTAGSWAPS $SSLCONF >> $SITE/conf/httpd.conf
		fi

		# Apply "tail" (extra stuff at the end) of template if it exists
		if [ -f $SITE/conf/httpd.conf.tail ]; then
			echo Adding custom lines $SITE/conf/httpd.conf.tail
			cat $SITE/conf/httpd.conf.tail >> $SITE/conf/httpd.conf
		fi
	fi

	# Add Site Config to the $VHOSTCONF
	echo "Include ${SITE}/conf/httpd.conf" >> $VHOSTCONF

	# Create a basic htpasswd file for "Stage"
	if [ ! -f $SITE/pw/stage.htpw ]; then
		htpasswd -bc $SITE/pw/stage.htpw $owner $STAGE_PASSWD
	fi

	# Apply Permissions
	if [ ! `/usr/bin/id $owner > /dev/null` ]; then
		if [ $ROOT_OWNED_SITEDIR == 1 ]; then
			/bin/chown root:$group $SITE
			/bin/chmod u=rwX,g=rwX,o=X $SITE
			# Set sticky bit on top level site dir
			/bin/chmod +t $SITE
		else
			/bin/chown $owner:$group $SITE
			/bin/chmod u=rwX,g=rX,o=X $SITE
		fi
		for dir in $BASE_DIRS_ROOT; do
			/bin/chown -hR root:$group $SITE/$dir
			/bin/chmod -R u=rwX,g=rX,o= $SITE/$dir
		done
		for dir in $BASE_DIRS_OWNER; do
			/bin/chown -hR $owner:$group $SITE/$dir
			/bin/chmod -R u=rwX,g=rX,o= $SITE/$dir
		done
		# Allow the web server to read the htpasswd files
		/bin/chgrp -R $WEBSRVUSER $SITE/pw
		# Apply .ssh permissions
		chmod -R u=rwX,go= $SITE/.ssh
	else
		echo " *** WARNING: $domain - OWNER: $owner does not exist!? Create it and try again!"
	fi
done

if [ -x /usr/sbin/selinuxenabled ] && [ `/usr/sbin/selinuxenabled` ]; then
	echo Updating SELINUX contexts...
	for ENV in $ENVIRONMENTS; do
		chcon -R system_u:object_r:httpd_sys_content_t:s0 /web/*/$ENV/$WEBDIR
	done
	chcon -R system_u:object_r:httpd_config_t:s0 /web/*/conf
	chcon -R system_u:object_r:httpd_config_t:s0 /web/*/pw
	chcon -R system_u:object_r:httpd_log_t:s0 /web/*/logs
	chcon -R system_u:object_r:httpd_sys_content_t:s0 /web/*/stats
fi


echo .
echo " *** Testing httpd.conf syntax *** "
httpd -t
echo .
echo " *** Make sure it looks the way you want, then restart apache *** "
